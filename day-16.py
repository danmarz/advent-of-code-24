import heapq

maze = """#############################################################################################################################################
#.............#.#.......#.....#.......#.....#.....#...#...#.............#...................#...#.........#.....#.....#...........#........E#
#.#########.#.#.#.###.#.###.#.#.#.#####.###.#.###.#.#.#.#.#.#######.###.#.#.#####.#########.###.#.###.###.###.#.###.###.#######.#.#.###.###.#
#.....#.....#.#.#.#.......................#.....#.#.#...#.......#...#.#.#.....#...#...#.........#...#...#.....#...#.....#.#...#.#.....#...#.#
#.#####.#####.#.#.#.#######.###.#####.#.#.#######.#.#####.#.###.#.###.#.###.###.###.###.###.#######.###.#########.#.#####.#.#.#.#####.###.#.#
#.#.....#.....#...#.....#...#...#.....#.#...#.....#.#.......#.#.#.#...#.....#...#.....#...#.#.....#.#.......#...#.#.........................#
###.#########.#########.#.###.###.#####.#.#.#.###.#.#.###.#.#.#.#.#.#######.#.#######.###.#.#.#.###.#.###.#.###.#.#######.#.#.###.#.#.#.###.#
#...#.......#.........#.#.#...#.#.......#.#.#...#.....................#.....#.......#.....#.#.#.....#.#...#.....#.....#...#.#...#.#.#.#.#...#
#.###.#####.#########.#.###.###.#.#######.#.###.###.#.###.#.###.#.#.#.#.###.#######.#.#####.#.#######.#.#.#####.#####.#.###.###.#.#.###.#.###
#.....#...#...#.....#...#...#...#.......#.#...#.....#...#...#...#.#.#...............#.#.....#.#...#...#...............#.#...#...............#
#######.#.###.#.###.###.#.###.#.#.###.#.#.###.#######.#.#.#.#.###.#.#######.#.#######.###.#.#.#.#.#.#####.#.#.#.#.#######.#####.#.#########.#
#...#...#.....#.#.#.#.#.....................#...#.#...#.......#...#...#...#...#.....#...#.#.#...#.#...#...#.#.#.#.#.............#.#.........#
#.#.#.#########.#.#.#.#.#.#####.###.###.###.###.#.#.#.###.#.###.#######.#.###.#.###.###.###.#.#######.#.#####.#.#.###.#.#.#.#.#.#.#.#########
#.#...#.........#.....#.......#.....#.#.....#...#.#.#...........#.....#.#...#.#.#.#.#.....#.#.#.......#.#...#...#.....#...#...........#.....#
#.#####.#######.#########.###.#######.#######.###.#.#.###.#.###.#.###.#.###.###.#.#.#####.#.#.#.#.#####.#.#.###########.###.#.#####.#.#.###.#
#.#.........#.#.#.............#.......#.......#...#.....#.....#.#...#.#.#.#.......#...#.#...#.#.#.#...#...#.....#.......#...#.#.......#...#.#
#.#########.#.#.#.#############.#####.#.#########.#####.#.###.#.#.###.#.#.###.#######.#.#.#.#.#.###.#.###.#####.#.#####.#.###.###.###.###.#.#
#.#.....#...#.#.#.#.....#.......#.....#.....#...#.....#.....#.#...#...........#.#.....#.#.#.#.#.....#...#.#...#...#...#.#.....#...#.....#.#.#
#.#.###.#.###.#.#.#.###.#.#######.#########.#.#.#####.#####.###.###.#.#######.#.#.#####.#.#.#.#########.#.#.#.###.#.#.###.#.#.#.#.#######.#.#
#...#...#.....#...#.#...#...#...#...#.....#...#.....#.....#...#...#.#.#...#...#.#...#.......#.#.......#.#.#.#...#.#.#.......#.#.#.........#.#
#####.#######.#####.#.#####.#.#####.#.#.#.###.#####.#####.###.#####.#.#.#.#.###.###.#######.#.#####.###.#.#.###.###.#######.###.#.#########.#
#...#.#.#...#.#.....#.....#.#.....#...#.#...#...#...#...#...#.....#.#.....#...#...#.#.....#.#.....#...#.#.#.#.#.....#.......#...#.......#...#
#.#.#.#.#.#.#.###.#.#.###.#.#####.###.#.###.#.#.#.###.#.#.#######.#.###.#.###.#.###.#.###.#.#####.###.#.###.#.#######.#######.###.#.###.#.###
#.#...#...............#.#.#.....#...#.#.#.#...#.#.#...#.#.#.......#...#.#.....#...#.....#.#...#.......#.....#.......#.........#...#...#.#...#
#.#####.###.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.###.#.#.#.#####.#.#.#.#######.#######.#####.#####.###.#.#.#.#################.###.#####.#
#.#.#...#.#.#...#...#...#...#.#...#...#.#.....#.#...#...#.#.#.#...#.#.#.#.#.......#.#...#.#.....#...#.#.#...#.#.......#.........#...#...#...#
#.#.#.###.#.#####.#####.#####.#######.#.#.###.#.#####.###.#.###.#.#.#.#.#.#.#.###.#.#.#.#.#.#####.#.#.#.#####.#####.#.#.#.#.###.#.#.###.#.###
#.#.......#.....#.....#...#.....#.....#.#...#...#...#.....#.....#.#.#.#.#...#...#.#...#.#...#.....#.#.#.....#.#.....#.#.#...#.#.#.#.....#...#
#.#######.#####.#.###.###.#####.###.###.#####.#####.#####.#######.###.#.#######.#.#.#.#.#####.#####.#.#.###.###.#####.#.#.###.#.#.#####.###.#
#...#.#...#...#.....#...#.....#...#...#.....#.......#.....#.........#.#.....#...#...#.............#.#.#...#.#...#...#.#.#.#...#...#...#...#.#
###.#.#.###.#.###.#####.#####.#.#.#.#######.#########.#########.###.#.#.###.#.#####.#.#############.#.###.#.#.###.###.###.###.###.#.#.###.#.#
#...#.#.#...#...#...........#.#.#.........#.#...#.....#...#.....#.#.#...#.#.#.#.....#.#.....#.......#.....#...#.........#...#.....#.#.....#.#
#.###.#.#.###.###.#####.#.###.#####.#####.#.#.#.#.#####.#.#.###.#.#.#.#.#.#.#.#.#####.###.#.#.###.#####.#.#########.###.###.#.#####.#######.#
#...#.#.#.#.#.#.......#.#...#.....#.....#.#...#.#.....#.#...#...#.#.#.#.#.....#.#...#...#.#.#.#...........#.......#...#.....#.....#.#.....#.#
#.#.#.#.#.#.#.#.#####.#.###.#####.#######.#####.#####.#.#####.###.#.#.#.###.###.#.#.###.###.#.#########.###.#####.#.#.#######.###.#.#.#####.#
#.............#...#.#.#.....#...#...#...#.....#.......#.....#.#...#.......#.#...#.#...#.....#.....#...........#...#.#.........#.#...#.......#
#.###.#########.#.#.#.#####.#.#####.#.#.#.###.#############.#.###.###.###.###.###.###.#####.#####.#.###.#####.#.###.###########.#######.#.###
#.#...#.....#.......#...#...#.......#.#.#...#.........#.....#...#...#...#...#...#...#.....#.#...#.......#...#.#...#...#.......#.......#.#...#
#.#####.###.#.#########.#.###.#.#.#.#.#.###.#####.###.#.#######.###.###.###.###.###.###.#.#.###.#########.#.###.#.###.#.#####.#.#####.#.###.#
#.#...#...#...#.........#.#...#.#.#.#.#.....#.......#.#.#.#...#...#.#...#.....#.......#.#.#...#.....#.....#...#.#.#...#...#.#.#.#...#.#.#...#
#.#.#.###.#####.#########.#.###.#.#.#.#######.#####.#.#.#.#.#.###.#.#.###.#######.#.#.#.#####.#.###.#.#######.###.#.#####.#.#.#.#.###.#.#.###
#.#.#...#...#.#.........#.#...#.#...#...#...#.#...#.#...#...#...#.#.#.#.........#...#.#.....#...#...#...#...#.....#.#.....#.#...#.......#...#
#.#.###.###.#.#########.#.###.#.###.###.#.#.#.#.###.#####.#####.#.#.#.#####.###.###.#####.#######.#####.#.#.#######.#.#####.#####.#########.#
#.#...#.....#.......#...#.......#.....#.#.#.#.#.#.......#.#.#...#...#.#...#...#...#.....#.#...#...#...#...#.#.....#.#.#...........#.....#...#
#.###.#######.###.#.#.#.#####.#.###.#.#.#.###.#.#.#####.#.#.#.#.###.#.#.#.#######.#####.#.#.#.#.###.#.###.#.#.#.###.#.#.###########.###.#.###
#...#.#.........#.#.#.....#...#.........#.......#.....#.#.#.#.#.#...#...#.......#.....#...#.#...#...#...#...#.#.#...#.#.........#...#.#.#...#
#.#.#.#####.#.#.#.#.#####.#.#############.#####.#####.#.#.#.#.###.#############.#.#.###.###.#####.#####.#.###.#.#.###.#########.#.#.#.#.###.#
#.#.#.#.....#...#.#.#.....#.#...#...#...#.#.......#...#.#...#.#...#.....#.....#.#.#.#...#...#.....#.....#.#.#.#.#...#.#.......#.............#
#.#.#.#.#####.#####.#.#######.#.#.#.#.#.#.#.#.#####.#####.###.#.#.#.###.#.###.#.#.#.#.###.#####.###.#####.#.#.#.###.#.#.#.#####.#.#.#.#####.#
#.#...#.#.#...#.....#...#.....#...#.#.#...#.#...#...#.....#...#...#...#.......#.#.#.....#.#.....#.....#...#...#...#.#.#.#.....#.#.#.#.....#.#
#.#####.#.#.#.###.#.###.#.#########.#.#########.#.###.#.###.#####.###.#####.###.#.#######.#.#.###.#####.#########.#.#.#.#####.#.#.#.###.###.#
#.#.....#.#.#.....#.#...#.#...#.#.....#.........#.....#...#.#...#.....#.#.....#.#...#...#.#...#...#...............#...#...#...#.#.#...#.#...#
#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.#######.###.#.#.#.#.#.#.#.#.###.#.###.#.#####.#.#.###.#.###.#####.#######.#######.#.###.#.#.#.###.###
#.#.#...#.#.#.......#.#.#...#.#.#.#.#.#...#...#...#...#.#...#.#...#.....#.#...#...#...#.#...#.#...#.#.....#.....#.#.#.....#.....#.#.#...#...#
#.###.#.#.#.#.#.###.#.#######.#.#.###.###.#.#.###.#####.#.#.#.#####.#.#.#.#.#####.#.###.###.#.###.#.#.#####.###.#.#.#.###########.#.###.###.#
#...#.#.#.....#.#...#.#.......#.#...#.#...#.#...#.#...#.#...#.#.....#.#...#.....#.#.#.....#.#.#...#.#...#...#.#...#.#.......#...............#
###.#.#.#####.#.#.#.#.#.#######.###.#.#.#######.#.#.#.#.#####.#.#####.###.#.###.#.#.#.###.#.#.#.###.#.#.###.#.#####.#####.###.#####.#.#######
#.#...#...#...#.#.#.#...#.............#...#...#...#.#.#.....#.#...#.#.....#.#...#...#.#...#...#...#.#.....#...........#...#...#...#...#.#...#
#.###.#.#.#.#####.#####.#####.#.#######.#.#.#.#.#####.#####.#.#.#.#.#.#######.#.#####.#.#.#.#######.#.###.#######.#####.###.###.#.#.###.#.#.#
#...#.....#.....#.......#...#.#.....#.#.#...#.#.....#.#...#...#.#.#.#.#.....#.#...#.#.#...#.#.....#.#...#.#...#...#.....#.#.................#
#.###.#########.#.###.#.#.#.#####.#.#.#.#####.#####.#.#.#.#######.#.#.#.#.#.#.###.#.#.#.###.#.###.#.#####.#.#.#####.#####.#######.#.#.#####.#
#.....#.#...#...#.#.#.#...#.......#.#...#.....#...#.#.#.#.#.......#.#.#.#.#...#.#...#.#.#...#.#.#.#.....#...#.#.....#...#...#...#...#...#...#
###.#.#.#.#.#.###.#.#.#############.#.###.#.###.###.#.#.#.#.#.#####.#.###.#####.###.#.###.###.#.#.#.###.#.###.#.#####.#.###.#.#.###.###.#.###
#...#...#.#...#.....#.....#.....#...#...#.....#.#...#...#.#.#.#.....#...#...#.......#.....#.....#.#...#.#...#...#.#...#...#...#.#...#.#.#...#
#.###.#.#.#######.###.###.###.###.#####.#####.#.#.#####.#.#.#.###.#.###.#.#.#####.#####.###.###.#.###.#.###.#####.#.#.###.###.#.#.#.#.#.#.#.#
#.#.....#...#.......#.#.#...#.....#.....#...#.#.......#.#...#...#.#.....#.#.....#...#.....#.#...#.#.#.#...#...#.....#...#...#...........#.#.#
#.###.#####.#.#####.#.#.###.#.#.###.###.###.#.#######.#########.#.#############.###.#.###.#.#.###.#.#.###.###.#####.###.###.###.#.#.#####.#.#
#.#.......#...#.....#...#...#...#...........#.....#.#...........#...............#...#.#.#.#.......#.....#.#.#.#...#.#...#...#...#.#...#...#.#
#.#.#.#.#.#####.#####.#.#.#####.###########.###.#.#.###############.#########.#######.#.#.#.#.#####.#####.#.#.#.#.###.###.###.###.#.#.#.#.#.#
#.#...#.#...#.#.....#...#.#...#.....#.....#.....#.#...#.....#.......#.......#.#.......#...#.#.....#.#.....#.....#...#.#.#.#.#...#.#.....#.#.#
#.###.#.###.#.#####.#####.#.#.#####.###.#.###.###.#.#.#.###.#.###.#.#.#####.###.#######.###.#####.###.#############.#.#.#.#.#.#.#.#######.#.#
#...#.#...#.#.....#.......#...#.....#...#.#...#...#.#.....#...........#.#.....#...#.........#...#.....#...........#...#...#...#.#.....#.#...#
#.###.###.#.#####.#########.###.#####.###.#.###.#########.#####.#####.#.#####.###.#.#########.#.#######.#.#######.#.###.#######.#####.#.#.#.#
#.#...#...#.....#.#.............#.....#...#.#.#.#.....#...#...#.#...#.#.....#.#...#.#...#...#.#.........#...#.....#.#...............#.#...#.#
#.#.###.#.#####.#.#.#############.#########.#.#.#.###.#.#####.#.#.#.#######.#.#.#####.#.#.#.#.#####.#####.#.#.#####.#.#########.#####.#.#.#.#
#...#...#.#...#...#.#...#.......#.....#.......#...#...#...#...#.#.#.......#.#.#.......#.#.#.......#...#...#...#.......#.....#...............#
#.###.#.###.#.#####.#.#.#.#.###.#.###.#.###########.###.#.#.###.#.#####.###.#.#######.#.#.#.#########.#.###############.###.#####.###.#.#.#.#
#...#.#...#.#...#...#.#...#.....#...#.#.#...#.....#.#.#...#...#.#.....#.....#.......#.#.#.....#.....#.#.#...........#...#...#.........#.#.#.#
###.#.#.#.#.###.#.###.#####.#.#######.#.#.#.#.###.#.#.#.#####.#.###.#####.#.#######.###.#####.#.###.#.#.###.#######.#.###.#.#.#####.#.#.#.#.#
#...#.#.#...#.#...#.#...#.#...#.......#.#.#.#.#...#.#...#.....#.....#.....#...#.......#.#...#.#.#.....#...#.#.#.......#.......#...#.#...#...#
#.###.#.#####.#.###.#.#.#.###.#.#.###.#.#.#.#.#.###.#.#####.#.#.#####.#######.#######.#.###.#.#.#.#######.#.#.#.###.###########.###.#.###.###
#...#.#.#.......#...#.#.....#.#.#.#.....#.#.#.#...#.#...#...#.#...#...#...........#.#.#...#...#.#.#.....#...#.....#.......#.#.......#.#.....#
#####.#.###.###.#.#.#.#.###.#.###.#####.#.###.###.#.###.#.###.#.#.#.###.#.#.#####.#.#.#.#.#####.###.###.###########.#####.#.#.#######.#.#.#.#
#.....#...#...#.#.#...#...#.......#.....#...#...#.#.#.....#.#.#.#.#...#...#.......#...#.#...#...#...#...#.............#...#.#.....#...#...#.#
#.#####.#.###.#.#.#######.#######.#.#######.###.#.#.#######.#.#.#.###.###.#########.###.#.#.#.#.#.###.###.#############.###.#####.###.###.#.#
#.#...#...#...#...#.#.....#...#...#...........#...#.#...#...#.#.#...#.#...........#...#...#.#.#.#.#.#...#...........#...#.......#.#.....#.#.#
#.#.#.#.#######.###.#.#.###.#.#.###.#.#####.###.#.#.#.#.#.#.#.#.#.###.#.###.###.#.###.###.#.#.###.#.###.#.#.#######.#.###.#.#####.#.#.###.#.#
#.#.#...#.....#...#.#.#.#...#.#.#...#.....#.#...#.#...#.#.#.#...#.#...#.#...#...#.#.#.#...#.#.........#.#.#...#...#.#.#...#.#.....#.#.....#.#
#.#.###.###.#.###.#.#.###.###.#.#.###.###.#.#.###.#####.###.#####.#.###.#.###.###.#.#.###.#.###.###.###.#.###.#.#.###.#####.#.#####.#.#####.#
#...#.......#.......#.#...#...#.#...#...#.#.#.#.#.....#...#.#.....#.#...#.#...#.#.#.#...#.#.#...#...#...#.#...#.#.#...#...#.......#.......#.#
#.###.#########.#.###.#.###.#.#####.###.#.#.#.#.#####.#.#.#.#.#####.#.###.#.###.#.#.###.###.#.###.###.#.#.#.#.#.#.#.###.#.#######.###.#####.#
#.#...#.#.....#.#.#...#.#...#.....#.#...#...#.#.......#.#.#.......#.#...#.#.#.#...#...#.....#.......#.#.#...#.#.#...#...#.......#...........#
#.###.#.#.#.#.#.#.#.###.###.###.#.#.#####.#.#.#######.###.#######.#.#.#.#.#.#.#.#####.###############.#######.#.###.#.#########.#.###.#######
#.....#.........#.#...........#.#.#.........#.......#.....#...#...#...#.#.#...#.#.........#...........#.......#.#...#...#...#.#.........#...#
#######.###.#####.#######.###.#.###########.#######.#####.#.#.#####.#.#.#.#.#.#.###.#######.#.#########.#####.#.###.###.#.#.#.###.#####.#.#.#
#...............#.....#...#...#...#.......#.......#.....#.#.#.....#.#.#...#.#.#.............#...........#...#.#...#.#...#.#.........#.#.#.#.#
#.###.#.#.#.#.#.#####.#.###.#####.#.###.###.###########.#.#.#####.###.###.#.#.###.#.#####################.#.#.###.###.###.#######.#.#.#.#.#.#
#.....................#.#...#.....#...#.....#.......#...#.#.#...#...#...#...#.....#...#...........#.....#.#.#.#.....#...#.........#...#.#.#.#
###.#.#.###.#.#.#.#####.#.###.#######.#######.#####.#.###.#.###.###.#.#######.#######.#######.#.#.#####.#.#.#.#.###.###.#.#####.#.###.#.#.#.#
#...#.#.....#.#...#.....#.....#.....#.......#...#.#...#...#...#.......#.......#.....#.#.........#...#...#.#.#.....#...#.#.#...#.#...#.#...#.#
#.###.#########.###.#######.#.#.#.#########.###.#.#####.#####.#######.#.#.#####.#.###.#.###########.#.###.#.#####.#.###.#.#.#.###.#.#######.#
#.#...#.......#.#.......#.#.#.#.#.........#.#...#...#...#...#.......#.#.#.....#.........#...#...#.....#...#.#.....#.#...#.#.#...#.#.#.......#
#.#.#.#.#####.#.#.#####.#.#.#.#.#####.#####.#.###.###.###.#.#######.#.#.#.###.#.#########.#.#.#.#.#####.###.#.#####.#.#####.###.#.#.#.#####.#
#.#.....#.#...#.#.....#.#...#.......#.#.....#.#.......#...#.....#.#.#.#.#.#.#.#.......#...#...#.#.#...#.#...#.....#.#.....#...#...#.#.#.....#
#.###.###.#.###.###.###.###########.#.#.#####.#####.#####.#####.#.#.###.#.#.#.#########.#######.###.#.#.#.#######.#.#####.#.#.###.#.#.#####.#
#...........#.#.........#...#...#...#.......#.#...#...#...#...#...#...#.#.#.............#.#.....#...#...#.............#...#.#...#...#.....#.#
#.#####.#.###.###.#######.#.#.#.#.###########.#.#.###.#.#####.#.#####.#.#.###############.#.#####.#######.###.#######.#.#######.###.#.###.###
#.#.#...#...#.....#.......#...#.#.....#.#.....#.#.#...#...#...#.#.....#.#...#.............#.....#.#.....#...#.#...#...#...#.....#.#.#...#...#
#.#.#.#####.#######.###########.#####.#.#.#####.#.###.###.#.###.#.#####.###.#######.#.#########.#.#####.###.#.#.#.#######.#.#####.#.###.###.#
#.#.#.......#.......#...#.....#...#.#...#...#...#...#.....#.....#.....#.#...#.....#.#.......#...#...#.....#.#.#.#.#.......#...#.#.........#.#
#.#.#.#####.#.#######.#.###.#####.#.###.###.#.#####.#######.#########.#.#.###.###.#########.#.#####.#.#####.#.#.#.#.#.#####.#.#.#.#.#######.#
#.#.......#...........#.....#.....#.......#.#.#...#.#.........#.....#...#.#...#.............#.#.....#.#...#.#...#.........#.#.#...#.......#.#
#.#.#.###.#.###.#.#########.#.#####.#######.#.#.###.#########.#.###.#####.#.###############.#.###.###.#.#.#.#.###########.###.#.###.#####.#.#
#...#...#...#...#.#...#.....#...#...#.......#...#...#.....#...#.#...#.#...#.........#.......#...#.#.....#.#.#.#...#.....#.#...#...#...#.#.#.#
#####.#.###.#.###.#.#.#.#####.#.#.###.#######.#.#.###.###.#.###.#.###.#.#.#####.###.###########.#.#####.#.#.###.#.#####.#.#.#.#####.#.#.#.#.#
#...#.#.....#...#.#.#...#.....#.#...#.......#.#...#...#...#.......#...#.#.........#.........#...#.....#.#.......#.....#.....#.#.......#.#.#.#
#.###.#####.###.#.#.#####.#.###.#####.#####.#.#.###.###.#########.#.###.#####.###.#########.#.#######.###############.#######.#.#######.#.#.#
#.....#.......#.#.#.......#.#...#.........#.#.#.....#.#...#...#...#.........#...#.........#.#.......#.......#.....#.#...#.....#.....#...#...#
#.###.#####.#.#.#.#.#.#.###.#.###.#####.#.#.#.#####.#.###.#.#.#.#####.#########.###########.#######.#######.###.#.#.###.#####.#####.#.#.###.#
#...........#...#.#.#.#.#...#.....#.....#.#.#.#...#...#.#...#.#.....#...#.....#...........#.......#.......#.....#.#...#.#...#.#...#...#.....#
#####.#######.###.#.###.#.#########.#.###.#.#.#.#.#.#.#.#####.#####.#####.###.#.#########.#.#####.#######.###.#.#.#.#.#.#.#.#.#.#.#.#.###.###
#.#...#...........#.....#.#.......#.#...#.#...#.#...#...#.....#.......#...#...#.#.......#.#...#.#.......#.....#.#...#.#...#.#.#.#.#.#...#...#
#.#.#.#.#.###.###.###.#####.###.###.###.#.#.###.#######.#.###.#####.#.#.###.#####.#####.#.###.#.#######.#######.###.#######.#.#.#.###.#.###.#
#...#...#...#...#.....#.....#...#...#.#...#.#...#.#...#.#...#.#...#.....#...#...#...#.#.#...#.#.......#...#.....#.#.#.....#.#.#.#...#.#.#...#
#.#########.#.#.#######.###.#.###.###.#####.#.#.#.#.#.#.###.###.#.#######.###.#.#.#.#.#.#.#.#.#.#####.###.#.###.#.#.#.###.#.###.###.#.#.#.###
#.#.......#.#.#...#.....#...#...#.#.....#.#.#...#...#.....#.....#.#.....#.#...#.#.#.#.....#.#.#.....#...#.#.....#...#.#...#...#...#.....#...#
#.###.###.#.#.###.#.#.###.#.###.#.#.#.#.#.#.#.#####.###########.#.#.###.#.#.###.#.#.#######.#.#####.#.#.#.###.#.#.###.#.#####.###.###.#.#.#.#
#...#...#.#.#...#.#.#.............................#.....#.....#.#...#...#.#.#.....#.....#.............#.....#.#.#.#...#.......#...#.....#...#
###.###.#.#.#.#.#.#.#.#####.#.#.#####.#.#.#####.#.#####.#.###.#.#####.###.#.#.#####.###.#.#########.###.#####.#.#.#.###########.#####.#.#.###
#.#...#.#.#.....#.#...........#...#.....#.#.............#...#.#.#...#...#...#.#...#.#.#.#...#...........#.....#.#.#.............#.....#...#.#
#.###.###.###.###.###.#.#########.#.#.###.#.###########.#.#.#.#.#.#.###.#####.#.#.#.#.#.#####.#.###.###.#.#####.#.###.#####.###.###.#.#.#.#.#
#.................#.....#.........#.#.....#...#.....#.........#...#.#...#...#...#.........................#.....#.#.#.#...#...#.............#
#.#######.###.#####.#.###.#########.#.###.#.#.#.###.#.#.#.#.#.#######.#.#.#.#####.#######.#.###.#.#####.###.#####.#.#.#.#.#######.#.#.#.#.#.#
#.....#...#...#...#.#...#...........#...#.#.#.....#.#.#.#.#.#.......#.....#...#.#.#.......#.#...#.#.......#.#.....#.#...#.....#...#...#.#.#.#
#.#.###.###.#.#.#.#.#.#.#############.#.#.#.#######.#.#.###.#######.###.#####.#.#.#.#######.###.#.#.#.#####.#.#####.#########.#.###.#.#.#.#.#
#.#.....#.#.....#.#.....#.....#.......#.#...#...#...#.#.#...#.....#...........#...#.#.....#...#.#.#.#.....#.#.........#.....#.#.#.#.#.....#.#
#.#######.#######.#####.#.###.#.#.###.#.#####.#.#.###.#.#.###.#.#######.#####.#.###.#.###.#.#.#.#.#######.#.#########.#.###.#.#.#.#.#####.#.#
#.....#.....#...#.....#.#.#.#.....................#...#...#...#.#.......#.....#.....#.#.#.#.#.#.#.#.......#.#.......#.#...#.#...#.#...#...#.#
#.#.#.###.#.#.#.###.###.#.#.#.#####.#.###.#########.#.#####.###.#.#####.#.#.#########.#.#.#.#.###.#.#####.#.#.#####.#####.#.#####.###.#.#.#.#
#S..#.....#...#...#.......#.........#.....#.........#.........#.......#...#.............#...#.......#.....#.......#.......#.............#...#
#############################################################################################################################################""".splitlines()


#### Part 1
def solve_maze(maze):
    # Directions: 0=North, 1=East, 2=South, 3=West
    # dx, dy for moving forward given direction
    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
    rows = len(maze)
    cols = len(maze[0])

    # Find start (S) and end (E) positions
    start = None
    end = None
    for r in range(rows):
        for c in range(cols):
            if maze[r][c] == "S":
                start = (r, c)
            elif maze[r][c] == "E":
                end = (r, c)

    # Initial direction is East (1)
    start_dir = 1

    # Distance array: dist[row][col][dir] = minimal cost found
    dist = [[[float("inf")] * 4 for _ in range(cols)] for __ in range(rows)]
    dist[start[0]][start[1]][start_dir] = 0

    # Priority queue: elements are (cost, row, col, dir)
    pq = []
    heapq.heappush(pq, (0, start[0], start[1], start_dir))

    while pq:
        current_cost, r, c, d = heapq.heappop(pq)

        # If this is not the best known cost for this state, skip
        if dist[r][c][d] < current_cost:
            continue

        # Check if we've reached the end
        if (r, c) == end:
            return current_cost  # The cost to reach the end with any orientation

        # Try moving forward
        dr, dc = directions[d]
        nr, nc = r + dr, c + dc
        if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] != "#":
            forward_cost = current_cost + 1
            if forward_cost < dist[nr][nc][d]:
                dist[nr][nc][d] = forward_cost
                heapq.heappush(pq, (forward_cost, nr, nc, d))

        # Try turning left (d-1) and right (d+1)
        # Left turn
        left_dir = (d - 1) % 4
        left_cost = current_cost + 1000
        if left_cost < dist[r][c][left_dir]:
            dist[r][c][left_dir] = left_cost
            heapq.heappush(pq, (left_cost, r, c, left_dir))

        # Right turn
        right_dir = (d + 1) % 4
        right_cost = current_cost + 1000
        if right_cost < dist[r][c][right_dir]:
            dist[r][c][right_dir] = right_cost
            heapq.heappush(pq, (right_cost, r, c, right_dir))

    # If end not reached, return some indication
    return None


minimal_score = solve_maze(maze)
print("part 1 minimal score:", minimal_score)


##### Part 2
def solve_maze(maze):
    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]  # N, E, S, W
    # directions indexed as: 0=North,1=East,2=South,3=West
    rows = len(maze)
    cols = len(maze[0])

    # Find start & end
    start = None
    end = None
    for r in range(rows):
        for c in range(cols):
            if maze[r][c] == "S":
                start = (r, c)
            elif maze[r][c] == "E":
                end = (r, c)

    start_dir = 1  # facing East initially

    # dist[row][col][dir]
    dist = [[[float("inf")] * 4 for _ in range(cols)] for __ in range(rows)]
    dist[start[0]][start[1]][start_dir] = 0
    pq = []
    heapq.heappush(pq, (0, start[0], start[1], start_dir))

    # Forward Dijkstra to find minimal cost
    while pq:
        current_cost, r, c, d = heapq.heappop(pq)
        if dist[r][c][d] < current_cost:
            continue

        if (r, c) == end:
            # We don't stop early because we might find other paths with same minimal cost
            pass

        # Move forward
        dr, dc = directions[d]
        nr, nc = r + dr, c + dc
        if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] != "#":
            forward_cost = current_cost + 1
            if forward_cost < dist[nr][nc][d]:
                dist[nr][nc][d] = forward_cost
                heapq.heappush(pq, (forward_cost, nr, nc, d))

        # Turn left
        left_dir = (d - 1) % 4
        left_cost = current_cost + 1000
        if left_cost < dist[r][c][left_dir]:
            dist[r][c][left_dir] = left_cost
            heapq.heappush(pq, (left_cost, r, c, left_dir))

        # Turn right
        right_dir = (d + 1) % 4
        right_cost = current_cost + 1000
        if right_cost < dist[r][c][right_dir]:
            dist[r][c][right_dir] = right_cost
            heapq.heappush(pq, (right_cost, r, c, right_dir))

    # Find minimal end cost
    end_min_cost = min(dist[end[0]][end[1]])
    # Find all end directions that achieve this cost
    end_dirs = [d for d in range(4) if dist[end[0]][end[1]][d] == end_min_cost]

    # Backward search to find all cells on any best path
    best_path_cells = [[False] * cols for _ in range(rows)]
    # We'll track states visited to avoid repeating
    visited_states = [[[False] * 4 for _ in range(cols)] for __ in range(rows)]

    stack = []
    # Initialize stack with end states
    for d in end_dirs:
        stack.append((end[0], end[1], d))
        visited_states[end[0]][end[1]][d] = True
        best_path_cells[end[0]][end[1]] = True  # End cell is on best path

    while stack:
        r, c, d = stack.pop()
        current_dist = dist[r][c][d]

        # Consider forward step predecessor
        # If we got here by moving forward from (r - dr, c - dc, d) with cost+1
        dr, dc = directions[d]
        pr, pc = r - dr, c - dc
        if 0 <= pr < rows and 0 <= pc < cols and maze[pr][pc] != "#":
            # Check if dist[pr][pc][d] + 1 = current_dist
            if dist[pr][pc][d] + 1 == current_dist:
                best_path_cells[pr][pc] = True
                if not visited_states[pr][pc][d]:
                    visited_states[pr][pc][d] = True
                    stack.append((pr, pc, d))

        # Consider turns
        # If we arrived here by turning left or right
        # Turning left: (d+1) %4 was old direction
        # dist[r][c][old_dir] + 1000 = dist[r][c][d]
        # If d = left_dir, old_dir = (d+1)%4
        old_dir = (d + 1) % 4
        if dist[r][c][old_dir] + 1000 == current_dist:
            best_path_cells[r][c] = True
            if not visited_states[r][c][old_dir]:
                visited_states[r][c][old_dir] = True
                stack.append((r, c, old_dir))

        # For turning right: d = right_dir means old_dir = (d-1)%4
        old_dir = (d - 1) % 4
        if dist[r][c][old_dir] + 1000 == current_dist:
            best_path_cells[r][c] = True
            if not visited_states[r][c][old_dir]:
                visited_states[r][c][old_dir] = True
                stack.append((r, c, old_dir))

    # Now best_path_cells contains True for any cell in a best path
    # Mark those cells in the maze (except walls) with 'O'
    maze_list = [list(row) for row in maze]
    for r in range(rows):
        for c in range(cols):
            if best_path_cells[r][c] and maze_list[r][c] != "#":
                maze_list[r][c] = "O"

    # Convert back to strings if needed
    maze_out = ["".join(row) for row in maze_list]

    return maze_out, end_min_cost


marked_maze, minimal_score = solve_maze(maze)
marked_count = sum(row.count("O") for row in marked_maze)
print("part 2 tile count:", marked_count)
